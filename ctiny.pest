// ctiny.pest
// Failed to install Pest Language Server. Please either run `cargo install pest-language-server`, or set a custom path using the configuration `pestIdeTools.serverPath`.

WHITESPACE = _{ " " | "\t" | "\n" | "\r" | "\r\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!"\n" ~ ANY)* }


// file layout
translation_unit = { SOI ~ function_definition* ~ entry_point_function_definition ~ EOI }

entry_point_function_definition = { "int" ~ "main" ~ "(" ~ ")" ~ block_statement }

function_definition = { type_specifier ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ block_statement }

// parameters and declarations
parameter_list = { declaration ~ ("," ~ declaration)* }
multi_declaration = { declaration ~ ("," ~ followup_declaration)* ~ ";" }
declaration = { type_specifier ~ identifier ~ ("[" ~ integer ~ "]")? }
followup_declaration = { identifier ~ ("[" ~ integer ~ "]")? }

// types
type_specifier = { "bool" | "float" | "char" | "int" }

// identifiers
identifier = @{ ('a'..'z' | 'A'..'Z' ) ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")* }


letter = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }

// literals
literal = { integer | float | char | boolean }

integer = @{ digit+ }
float = @{ integer ~ "." ~ integer }
char = @{ "'" ~ (letter | digit) ~ "'" }
boolean = { "true" | "false" }

// statements
statement = { block_statement | assignment_statement | if_statement | while_statement | jump_statement | ";" }

block_statement = { "{" ~ multi_declaration* ~ statement* ~ "}" }

assignment_statement = { identifier ~ ("[" ~ expression ~ "]")? ~ "=" ~ expression ~ ";" }

if_statement = { "if" ~ "(" ~ expression ~ ")" ~ statement ~ ("else" ~ statement)? }

while_statement = { "while" ~ "(" ~ expression ~ ")" ~ statement }

jump_statement = { "return" ~ expression ~ ";" | "break" ~ ";" | "continue" ~ ";" }

// expressions
expression = { conjunction ~ ("||" ~ conjunction)* }
conjunction = { equality ~ ("&&" ~ equality)* }
equality = { relation ~ (equality_operator ~ relation)* }
relation = { addition ~ (relation_operator ~ addition)? }
addition = { term ~ (addition_operator ~ term)* }
term = { factor ~ (multiplication_operator ~ factor)* }
factor = { unary_operator? ~ primary }
primary = { identifier ~ ("[" ~ expression ~ "]")? | literal | "(" ~ expression ~ ")" | function_call | type_cast }

function_call = { identifier ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }
type_cast = { "(" ~ type_specifier ~ ")" ~ primary }

// operators
unary_operator = { "-" | "!" }
addition_operator = { "+" | "-" }
multiplication_operator = { "*" | "/" | "%" }
relation_operator = { "<" | ">" | "<=" | ">=" }
equality_operator = { "==" | "!=" }

