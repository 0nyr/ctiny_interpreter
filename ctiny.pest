// ctiny.pest
// Failed to install Pest Language Server. Please either run `cargo install pest-language-server`, or set a custom path using the configuration `pestIdeTools.serverPath`.

WHITESPACE = _{ " " | "\t" | "\n" | "\r" | "\r\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!"\n" ~ ANY)* }
KEYWORD = _{ "int" | "float" | "char" | "bool" | "if" | "else" | "while" | "return" | "break" | "continue" | "true" | "false" | "main" }

// file layout
translation_unit = { SOI ~ function_definition* ~ entry_point_function_definition ~ EOI }

entry_point_function_definition = { "int" ~ "main" ~ "(" ~ ")" ~ block }

function_definition = { type_specifier ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ block }

block = { "{" ~ multi_declaration* ~ multi_statement ~ "}" }


// parameters and declarations
parameter_list = { declaration ~ ("," ~ declaration)* }
multi_declaration = { declaration ~ ("," ~ followup_declaration)* ~ ";" }
declaration = { type_specifier ~ identifier ~ ("[" ~ integer ~ "]")? }
followup_declaration = { identifier ~ ("[" ~ integer ~ "]")? }

// types
type_specifier = { "bool" | "float" | "char" | "int" }

// identifiers
identifier = @{ !(KEYWORD) ~ ('a'..'z' | 'A'..'Z' ) ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")* }


letter = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }

// literals
literal = { float | integer | char | boolean } // WARN: float MUST be before integer for correct capture precedence.

integer = @{ digit+ }
float = @{ integer ~ "." ~ integer }
char = @{ "'" ~ (letter | digit) ~ "'" }
boolean = { "true" | "false" }

// statements
// NOTE: no empty statement allowed
statement = { assignment_statement | if_else_statement | while_statement | jump_statement }
multi_statement = {  (statement ~ (";"))* }
assignment_statement = { get_or_set_value ~ "=" ~ expression }
if_else_statement = { "if" ~ "(" ~ expression ~ ")" ~ "{" ~ multi_statement ~ "}" ~ ("else" ~ "{" ~ multi_statement ~ "}")? }
while_statement = { "while" ~ "(" ~ expression ~ ")" ~ "{" ~ multi_statement ~ "}" }

jump_statement = { return_statement | break_statement | continue_statement }
return_statement = { "return" ~ expression }
break_statement = { "break" }
continue_statement = { "continue" }

// expressions
expression = { disjunction } // top level expression is disjunction
disjunction = { conjunction ~ (disjunction_operator ~ conjunction)* }
conjunction = { equality ~ (conjunction_operator ~ equality)* }
equality = { relation ~ (equality_operator ~ relation)* }
relation = { addition ~ (relation_operator ~ addition)? }
addition = { term ~ (addition_operator ~ term)* }
term = { factor ~ (multiplication_operator ~ factor)* }
factor = { unary_operator? ~ primary }

primary = { function_call | type_cast | get_or_set_value | literal | parenthesized_expression }
parenthesized_expression = { "(" ~ expression ~ ")" }
get_or_set_value = { identifier ~ ("[" ~ expression ~ "]")? }
function_call = { identifier ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }
type_cast = { "(" ~ type_specifier ~ ")" ~ primary }

// operators
disjunction_operator = { "||" }
conjunction_operator = { "&&" }
unary_operator = { "-" | "!" }
addition_operator = { "+" | "-" }
multiplication_operator = { "*" | "/" | "%" }
relation_operator = { "<=" | ">=" | "<" | ">" } // WARN: "<=" and ">=" MUST be before "<" and ">" for correct capture precedence.
equality_operator = { "==" | "!=" }

