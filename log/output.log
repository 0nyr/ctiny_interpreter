[2023-07-01T19:13:02 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:17:20 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:19:39 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:22:41 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:22:58 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:23:53 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:24:29 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:24:46 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:25:23 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:25:23 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res
[2023-07-01T19:30:53 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:30:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res
[2023-07-01T19:37:45 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:37:45 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/cpp
[2023-07-01T19:37:45 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid
[2023-07-01T19:37:45 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid
[2023-07-01T19:37:45 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/c
[2023-07-01T19:42:44 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_a.ctiny
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_b.ctiny
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-01T19:47:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-01T19:47:48 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:47:48 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-01T19:48:11 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-01T19:48:11 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_a.ctiny
[2023-07-01T19:48:11 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-01T19:48:11 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-01T19:48:11 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_b.ctiny
[2023-07-03T10:35:34 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_a.ctiny
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_b.ctiny
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T10:35:59 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T10:42:09 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_a.ctiny
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_b.ctiny
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T10:43:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_a.ctiny
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_b.ctiny
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T10:43:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_a.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_b.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_a.ctiny
[2023-07-03T11:54:00 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 6:5
  |
6 |     char c; //error: declara-on must be at the beginning
  |     ^---
  |
  = expected statement
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_c.ctiny
[2023-07-03T11:54:00 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 4:12
  |
4 |     c = a; // error a not defined.
  |            ^---
  |
  = expected statement
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_d.ctiny
[2023-07-03T11:54:00 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int x; // global not allowed
  | ^---
  |
  = expected translation_unit
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_b.ctiny
[2023-07-03T11:54:00 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 2:11
  |
2 |     int a = 2; //error; declaration should be in next lines
  |           ^---
  |
  = expected int_type or statement
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T11:54:00 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected translation_unit
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-03T11:54:00 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:5
  |
3 |     float y, z;
  |     ^---
  |
  = expected statement
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_d.ctiny
[2023-07-03T11:54:00 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:   --> 11:2
   |
11 | }
   |  ^---
   |
   = expected int_type
[2023-07-03T11:54:00 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_b.ctiny
[2023-07-03T11:54:00 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:5
  |
3 |     char c;
  |     ^---
  |
  = expected statement
[2023-07-03T11:57:22 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T11:57:34 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected translation_unit
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-03T11:57:34 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:5
  |
3 |     float y, z;
  |     ^---
  |
  = expected statement
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_d.ctiny
[2023-07-03T11:57:34 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:   --> 11:2
   |
11 | }
   |  ^---
   |
   = expected int_type
[2023-07-03T11:57:34 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_b.ctiny
[2023-07-03T11:57:34 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:5
  |
3 |     char c;
  |     ^---
  |
  = expected statement
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:06:15 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected translation_unit
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-03T12:06:15 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:5
  |
3 |     float y, z;
  |     ^---
  |
  = expected statement
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_d.ctiny
[2023-07-03T12:06:15 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:   --> 11:2
   |
11 | }
   |  ^---
   |
   = expected int_type
[2023-07-03T12:06:15 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_b.ctiny
[2023-07-03T12:06:15 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:5
  |
3 |     char c;
  |     ^---
  |
  = expected statement
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:11:50 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected translation_unit
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-03T12:11:50 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:5
  |
3 |     float y, z;
  |     ^---
  |
  = expected statement
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_d.ctiny
[2023-07-03T12:11:50 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:   --> 11:2
   |
11 | }
   |  ^---
   |
   = expected int_type
[2023-07-03T12:11:50 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_b.ctiny
[2023-07-03T12:11:50 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:5
  |
3 |     char c;
  |     ^---
  |
  = expected statement
[2023-07-03T12:12:14 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:12:14 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:12:14 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:12:14 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected translation_unit
[2023-07-03T12:13:23 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:13:23 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:13:23 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:13:23 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T12:16:24 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:16:24 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:16:24 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:16:24 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected translation_unit
[2023-07-03T12:16:41 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:16:41 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:16:41 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:16:41 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected translation_unit
[2023-07-03T12:35:21 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:35:21 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:35:21 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:35:21 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected translation_unit
[2023-07-03T12:38:37 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:38:37 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:38:37 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:38:37 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T12:39:01 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:39:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:39:01 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:39:01 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition
[2023-07-03T12:40:54 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:40:54 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:40:54 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:40:54 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition
[2023-07-03T12:41:53 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:41:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:41:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:41:53 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition
[2023-07-03T12:44:23 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:44:23 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:44:23 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:44:23 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition
[2023-07-03T12:44:48 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:44:48 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T12:44:48 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T12:44:48 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 2:1
  |
2 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition
[2023-07-03T12:46:55 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:47:12 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:47:12 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T12:47:12 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T12:47:12 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition
[2023-07-03T12:47:54 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:47:54 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T12:47:54 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T12:47:54 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | // a Ctiny example with a function call
  | ^---
  |
  = unknown parsing error
[2023-07-03T12:49:23 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:49:23 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T12:49:23 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T12:49:23 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected function_definition
[2023-07-03T12:50:09 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:50:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T12:50:09 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T12:50:09 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T12:51:46 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T12:51:46 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T12:51:46 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T12:51:46 UTC][DEBUG tiny_ebnf_grammar_parser::syntax_parsing::parser] Content of file: // a Ctiny example with a function call

int sum(int a, int b) {
    int a;
    a = 10;
    return c;
}
    
int main () {    
    return 0;
}
[2023-07-03T12:51:46 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T13:01:08 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T13:01:08 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T13:01:08 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T13:01:08 UTC][DEBUG tiny_ebnf_grammar_parser::syntax_parsing::parser] Content of file: // a Ctiny example with a function call

int sum(int a, int b) {
    int a;
    a = 10;
    return c;
}
    
int main () {    
    return 0;
}
[2023-07-03T13:01:08 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T13:03:27 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T13:03:27 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T13:03:27 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T13:03:27 UTC][DEBUG tiny_ebnf_grammar_parser::syntax_parsing::parser] Content of file: // a Ctiny example with a function call

int sum(int a, int b) {
    int a;
    a = 10;
    return c;
}
    
int main () {    
    return 0;
}
[2023-07-03T13:03:27 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T13:03:40 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T13:03:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T13:03:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T13:03:40 UTC][DEBUG tiny_ebnf_grammar_parser::syntax_parsing::parser] Content of file: // a Ctiny example with a function call

int sum(int a, int b) {
    int a;
    a = 10;
    return c;
}
    
int main () {    
    return 0;
}
[2023-07-03T13:03:40 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T13:07:52 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T13:07:52 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T13:07:52 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T13:07:52 UTC][DEBUG tiny_ebnf_grammar_parser::syntax_parsing::parser] Content of file: // a Ctiny example with a function call

int sum(int a, int b) {
    int a;
    a = 10;
    return c;
}
    
int main () {    
    return 0;
}
[2023-07-03T13:07:52 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T13:08:38 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T13:08:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T13:08:38 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T13:08:38 UTC][DEBUG tiny_ebnf_grammar_parser::syntax_parsing::parser] Content of file: // a Ctiny example with a function call

int sum(int a, int b) {
    int a;
    a = 10;
    return c;
}
    
int main () {    
    return 0;
}
[2023-07-03T13:08:38 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 3:1
  |
3 | int sum(int a, int b) {
  | ^---
  |
  = expected entry_point_function_definition or function_definition
[2023-07-03T15:22:47 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T15:22:47 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T15:22:47 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T15:24:21 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T15:24:21 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T15:24:21 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T15:24:21 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int test_function(int a, int b) { return a + b; }
  | ^---
  |
  = expected function_definition
[2023-07-03T15:25:31 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T15:25:31 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T15:25:31 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T15:25:31 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int test_function() { return a + b; }
  | ^---
  |
  = expected function_definition
[2023-07-03T15:27:14 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T15:27:14 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T15:27:14 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T15:27:14 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | bool test_function() { return a + b; }
  | ^---
  |
  = expected function_definition
[2023-07-03T15:34:52 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T15:34:52 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T15:34:52 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T15:34:52 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | bool test_function() { }
  | ^---
  |
  = expected function_definition
[2023-07-03T15:42:41 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T15:42:41 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T15:42:41 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T15:42:41 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | bool test_function() { }
  | ^---
  |
  = expected function_definition
[2023-07-03T16:09:29 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:09:29 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T16:09:29 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T16:09:44 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:09:44 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T16:09:44 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T16:09:44 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int variable_name;
  | ^---
  |
  = expected multi_declaration
[2023-07-03T16:14:31 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:14:31 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T16:14:31 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T16:14:31 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file example_1.ctiny!
[2023-07-03T16:21:08 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:21:08 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T16:21:08 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T16:21:08 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:24
  |
1 | int variable_name[10], variable_name2;
  |                        ^---
  |
  = expected type_specifier
[2023-07-03T16:24:46 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:24:46 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T16:24:46 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T16:24:46 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file example_1.ctiny!
[2023-07-03T16:35:44 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:35:44 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T16:35:44 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T16:35:44 UTC][DEBUG tiny_ebnf_grammar_parser::syntax_parsing::parser] Content of file: // a Ctiny example with a function call

int sum(int a, int b) {
    int a;
    a = 10;
    return c;
}
    
int main () {    
    return 0;
}
[2023-07-03T16:35:44 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:   --> 11:2
   |
11 | }
   |  ^---
   |
   = expected entry_point_function_definition or type_specifier
[2023-07-03T16:38:12 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:38:12 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/building_grammar/example_1.ctiny
[2023-07-03T16:38:12 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-03T16:38:12 UTC][DEBUG tiny_ebnf_grammar_parser::syntax_parsing::parser] Content of file: // a Ctiny example with a function call

int sum(int a, int b) {
    int a;
    a = 10;
    return c;
}
    
int main () {    
    return 0;
}
[2023-07-03T16:38:12 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file example_1.ctiny!
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T16:38:53 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:   --> 17:12
   |
17 |     c = sum(a, b);
   |            ^---
   |
   = expected addition_operator, multiplication_operator, relation_operator, or equality_operator
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file valid_program_a.ctiny!
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_d.ctiny
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file valid_program_d.ctiny!
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_b.ctiny
[2023-07-03T16:38:53 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file valid_program_b.ctiny!
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_c.ctiny
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_a.ctiny
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_d.ctiny
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/valid/valid_program_b.ctiny
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file valid_program_c.ctiny!
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file valid_program_a.ctiny!
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_d.ctiny
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file valid_program_d.ctiny!
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/valid/valid_program_b.ctiny
[2023-07-03T16:48:13 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing successful for file valid_program_b.ctiny!
[2023-07-03T16:56:37 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_a.ctiny
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_b.ctiny
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_a.ctiny
[2023-07-03T16:58:40 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 6:5
  |
6 |     char c; //error: declara-on must be at the beginning
  |     ^---
  |
  = expected statement
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_c.ctiny
[2023-07-03T16:58:40 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 6:5
  |
6 |     Int a; // not allowed here
  |     ^---
  |
  = expected statement
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_d.ctiny
[2023-07-03T16:58:40 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 1:1
  |
1 | int x; // global not allowed
  | ^---
  |
  = expected translation_unit
[2023-07-03T16:58:40 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_b.ctiny
[2023-07-03T16:58:40 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 2:5
  |
2 |     int a = 2; //error; declaration should be in next lines
  |     ^---
  |
  = expected multi_declaration or statement
[2023-07-03T17:03:10 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-03T17:03:10 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-03T17:03:10 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_c.ctiny
[2023-07-03T17:03:10 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 6:5
  |
6 |     int a; // not allowed here
  |     ^---
  |
  = expected statement
[2023-07-04T10:27:19 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-04T10:27:19 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-04T10:27:19 UTC][INFO tiny_ebnf_grammar_parser::syntax_parsing] Parsing file: res/invalid/invalid_program_c.ctiny
[2023-07-04T10:27:19 UTC][ERROR tiny_ebnf_grammar_parser::syntax_parsing] Parsing error:  --> 6:5
  |
6 |     int a; // not allowed here
  |     ^---
  |
  = expected statement
[2023-07-04T15:38:26 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-04T15:38:26 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-04T15:38:26 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_program_c.ctiny
[2023-07-04T15:38:26 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] Parsing error f: invalid_program_c.ctiny]:  --> 6:5
  |
6 |     int a; // not allowed here
  |     ^---
  |
  = expected statement
[2023-07-04T15:41:34 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-04T15:41:34 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_undefined_error.ctiny
[2023-07-04T15:41:34 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_undefined_error.ctiny
[2023-07-04T15:41:34 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing successful [f: invalid_undefined_error.ctiny]!
[2023-07-04T15:43:36 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-04T15:43:36 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_undefined_error.ctiny
[2023-07-04T15:43:36 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_undefined_error.ctiny
[2023-07-04T15:43:36 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing successful [f: invalid_undefined_error.ctiny]!
[2023-07-04T15:43:36 UTC][INFO tiny_ebnf_grammar_parser::pipelines] parsing_and_semantic_analysis AST: Err(
    Error {
        variant: CustomError {
            message: "Unexpected rule: translation_unit",
        },
        location: Span(
            (
                0,
                94,
            ),
        ),
        line_col: Span(
            (
                1,
                1,
            ),
            (
                9,
                2,
            ),
        ),
        path: None,
        line: "int main () {",
        continued_line: Some(
            "}",
        ),
    },
)
[2023-07-04T15:44:52 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-04T15:44:52 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_undefined_error.ctiny
[2023-07-04T15:44:52 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_undefined_error.ctiny
[2023-07-04T15:44:52 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing successful [f: invalid_undefined_error.ctiny]!
[2023-07-04T15:44:52 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] Parsing error [f: invalid_undefined_error.ctiny]:  --> 1:1
  |
1 | int main () {
  | ...
9 | }
  | ^
  |
  = Unexpected rule: translation_unit
[2023-07-04T15:48:43 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-04T15:48:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_undefined_error.ctiny
[2023-07-04T15:48:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_undefined_error.ctiny
[2023-07-04T15:48:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: invalid_undefined_error.ctiny]!
[2023-07-04T15:48:43 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: invalid_undefined_error.ctiny]:  --> 1:1
  |
1 | int main () {
  | ...
9 | }
  | ^
  |
  = Unexpected rule: translation_unit
[2023-07-04T15:49:02 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-04T15:49:02 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-04T15:49:02 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-04T15:49:02 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-04T15:49:02 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:   --> 1:1
   |
 1 | int main () {
   | ...
16 | }
   | ^
   |
   = Unexpected rule: translation_unit
[2023-07-04T15:54:27 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-04T15:54:27 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-04T15:54:27 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-04T15:54:27 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-05T08:23:10 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-05T08:23:10 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-05T08:23:10 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-05T08:23:10 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-05T08:23:10 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 2:5
  |
2 |     bool x;
  |     ^-----^
  |
  = Unexpected statement: multi_declaration
[2023-07-05T08:50:39 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-05T08:50:39 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-05T08:50:39 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-05T08:50:39 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-05T08:50:39 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 2:5
  |
2 |     bool x;
  |     ^-----^
  |
  = ðŸ”´ Unexpected <statement>: multi_declaration
[2023-07-05T08:51:32 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-05T08:51:32 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-05T08:51:32 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-05T08:51:32 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-05T08:51:32 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 2:5
  |
2 |     bool x;
  |     ^-----^
  |
  = ðŸ”´ Unexpected <statement>: multi_declaration
[2023-07-05T10:01:31 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-05T10:01:31 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-05T10:01:31 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-05T10:01:31 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-05T10:01:31 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 2:5
  |
2 |     bool x;
  |     ^-----^
  |
  = ðŸ”´ Unexpected <statement>: multi_declaration
[2023-07-05T10:01:43 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-05T10:01:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-05T10:01:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-05T10:01:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-05T10:01:43 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 2:5
  |
2 |     bool x;
  |     ^-----^
  |
  = ðŸ”´ Unexpected <statement>: multi_declaration
[2023-07-05T10:03:05 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-05T10:03:05 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_b.ctiny
[2023-07-05T10:03:05 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_b.ctiny
[2023-07-05T10:03:05 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_b.ctiny]!
[2023-07-05T10:03:05 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_b.ctiny]:  --> 2:5
  |
2 |     int i;
  |     ^----^
  |
  = ðŸ”´ Unexpected <statement>: multi_declaration
[2023-07-06T11:29:18 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-06T11:29:18 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-06T11:29:18 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-06T11:29:18 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-06T11:29:18 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 3:14
  |
3 |     float y, z;
  |              ^
  |
  = ðŸ”´ Unexpected <type_specifier>: z
[2023-07-06T11:33:57 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-06T11:33:57 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-06T11:33:57 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-06T11:33:57 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-06T11:33:57 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 3:14
  |
3 |     float y, z;
  |              ^
  |
  = ðŸ”´ Unexpected <type_specifier>: z
[2023-07-06T11:38:48 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-06T11:38:48 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-06T11:38:48 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-06T11:38:48 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-06T11:38:48 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 3:14
  |
3 |     float y, z;
  |              ^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <type_specifier>: z
[2023-07-06T12:00:57 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-06T12:00:57 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-06T12:00:57 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-06T12:00:57 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-06T12:02:42 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-06T12:02:42 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-06T12:02:42 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-06T12:02:42 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-06T12:04:28 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-06T12:04:28 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-06T12:04:28 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-06T12:04:28 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-06T12:04:28 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 5:5
  |
5 |     z = 0;
  |     ^----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-06T13:32:26 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-06T13:32:26 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-06T13:32:26 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-06T13:32:26 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-06T13:32:26 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 5:5
  |
5 |     z = 0;
  |     ^----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/building_grammar/example_1.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_program_a.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_program_c.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_undefined_error.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_program_d.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/invalid/invalid_program_b.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_c.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_a.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_d.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: res/valid/valid_program_b.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/building_grammar/example_1.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: example_1.ctiny]!
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: example_1.ctiny]:  --> 5:5
  |
5 |     a = 10;
  |     ^-----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_program_a.ctiny
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] Basic Parsing error f: invalid_program_a.ctiny]:  --> 6:5
  |
6 |     char c; //error: declaration must be at the beginning
  |     ^---
  |
  = expected statement
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: invalid_program_a.ctiny]:  --> 6:5
  |
6 |     char c; //error: declaration must be at the beginning
  |     ^---
  |
  = expected statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_program_c.ctiny
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] Basic Parsing error f: invalid_program_c.ctiny]:  --> 6:5
  |
6 |     int a; // not allowed here
  |     ^---
  |
  = expected statement
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: invalid_program_c.ctiny]:  --> 6:5
  |
6 |     int a; // not allowed here
  |     ^---
  |
  = expected statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_undefined_error.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: invalid_undefined_error.ctiny]!
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: invalid_undefined_error.ctiny]:  --> 4:5
  |
4 |     c = a; // error a not defined.
  |     ^----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_program_d.ctiny
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] Basic Parsing error f: invalid_program_d.ctiny]:  --> 1:1
  |
1 | int x; // global not allowed
  | ^---
  |
  = expected translation_unit
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: invalid_program_d.ctiny]:  --> 1:1
  |
1 | int x; // global not allowed
  | ^---
  |
  = expected translation_unit
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/invalid/invalid_program_b.ctiny
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] Basic Parsing error f: invalid_program_b.ctiny]:  --> 2:5
  |
2 |     int a = 2; //error; declaration should be in next lines
  |     ^---
  |
  = expected multi_declaration or statement
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: invalid_program_b.ctiny]:  --> 2:5
  |
2 |     int a = 2; //error; declaration should be in next lines
  |     ^---
  |
  = expected multi_declaration or statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_c.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_c.ctiny]!
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_c.ctiny]:  --> 5:5
  |
5 |     a = 10;
  |     ^-----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_a.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 5:5
  |
5 |     z = 0;
  |     ^----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_d.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_d.ctiny]!
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_d.ctiny]:  --> 4:5
  |
4 |     i = 10;
  |     ^-----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: res/valid/valid_program_b.ctiny
[2023-07-07T11:43:01 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_b.ctiny]!
[2023-07-07T11:43:01 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_b.ctiny]:  --> 5:5
  |
5 |     i = 20;
  |     ^-----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T11:43:14 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-07T11:43:30 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-07T11:43:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-07T11:43:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-07T11:43:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-07T11:43:30 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 5:5
  |
5 |     z = 0;
  |     ^----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T11:51:43 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-07T11:51:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-07T11:51:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-07T11:51:43 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-07T11:51:43 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 5:5
  |
5 |     z = 0;
  |     ^----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T12:04:28 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-07T12:04:28 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-07T12:04:28 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-07T12:04:28 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-07T12:04:28 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 5:5
  |
5 |     z = 0;
  |     ^----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-07T12:11:05 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-07T12:11:05 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Input file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-07T12:11:05 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-07T12:11:05 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Basic Parsing successful [f: valid_program_a.ctiny]!
[2023-07-07T12:11:05 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] AST building error [f: valid_program_a.ctiny]:  --> 5:5
  |
5 |     z = 0;
  |     ^----^
  |
  = ðŸ”´ [AST building error] ðŸ”´ Unexpected <statement>: statement
[2023-07-10T14:03:44 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-10T14:03:56 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T14:58:07 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T14:58:28 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T14:58:28 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:00:52 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T15:00:52 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:03:47 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T15:03:47 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:04:11 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T15:04:11 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:04:11 UTC][INFO tiny_ebnf_grammar_parser::syntax_tree::functions] inner_pairs len: 0
[2023-07-12T15:05:04 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T15:05:04 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:05:04 UTC][INFO tiny_ebnf_grammar_parser::syntax_tree::functions] inner_pairs len: 0
[2023-07-12T15:05:04 UTC][INFO tiny_ebnf_grammar_parser::syntax_tree::functions] pairs to string: ""
[2023-07-12T15:07:56 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T15:07:56 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:07:56 UTC][ERROR tiny_ebnf_grammar_parser::pipelines] ðŸš§ AST ERROR [f: valid_program_a.ctiny]: 
   --> 16:2
   |
16 | 
   | ^
   |
   = ðŸ”´ [AST building error] Last function must be the entry point function.

[2023-07-12T15:21:08 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T15:21:08 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:21:08 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_a.ctiny!
[2023-07-12T15:21:08 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 167,
    },
    data: TranslationUnit {
        functions: None,
        main_function: Node {
            sp: SpanPosition {
                start: 0,
                end: 167,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 12,
                        end: 167,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 18,
                                    end: 24,
                                },
                                data: Declaration {
                                    type_specifier: Bool,
                                    identifier: Identifier {
                                        name: "x",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 30,
                                    end: 37,
                                },
                                data: Declaration {
                                    type_specifier: Float,
                                    identifier: Identifier {
                                        name: "y",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 39,
                                    end: 40,
                                },
                                data: Declaration {
                                    type_specifier: Float,
                                    identifier: Identifier {
                                        name: "z",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 47,
                                    end: 53,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "z",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 58,
                                    end: 64,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "y",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 69,
                                    end: 78,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "x",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Bool(
                                                true,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 84,
                                    end: 151,
                                },
                                data: If(
                                    IfStatement {
                                        condition: GetOrSetValue(
                                            GetOrSetValue {
                                                identifier: Identifier {
                                                    name: "x",
                                                },
                                                index: None,
                                            },
                                        ),
                                        if_body: [
                                            Assignment(
                                                AssignmentStatement {
                                                    set_value: GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "y",
                                                        },
                                                        index: None,
                                                    },
                                                    expression: BinaryExpression(
                                                        BinaryExpression {
                                                            left: GetOrSetValue(
                                                                GetOrSetValue {
                                                                    identifier: Identifier {
                                                                        name: "y",
                                                                    },
                                                                    index: None,
                                                                },
                                                            ),
                                                            operator: Plus,
                                                            right: GetOrSetValue(
                                                                GetOrSetValue {
                                                                    identifier: Identifier {
                                                                        name: "z",
                                                                    },
                                                                    index: None,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        else_body: Some(
                                            [
                                                Assignment(
                                                    AssignmentStatement {
                                                        set_value: GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "y",
                                                            },
                                                            index: None,
                                                        },
                                                        expression: BinaryExpression(
                                                            BinaryExpression {
                                                                left: GetOrSetValue(
                                                                    GetOrSetValue {
                                                                        identifier: Identifier {
                                                                            name: "y",
                                                                        },
                                                                        index: None,
                                                                    },
                                                                ),
                                                                operator: Minus,
                                                                right: GetOrSetValue(
                                                                    GetOrSetValue {
                                                                        identifier: Identifier {
                                                                            name: "z",
                                                                        },
                                                                        index: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            ],
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 156,
                                    end: 165,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_c.ctiny
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_c.ctiny!
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 232,
    },
    data: TranslationUnit {
        functions: Some(
            [
                Node {
                    sp: SpanPosition {
                        start: 40,
                        end: 131,
                    },
                    data: Function {
                        name: Identifier {
                            name: "sum",
                        },
                        return_type: Int,
                        params: Some(
                            [
                                Node {
                                    sp: SpanPosition {
                                        start: 48,
                                        end: 53,
                                    },
                                    data: Declaration {
                                        type_specifier: Int,
                                        identifier: Identifier {
                                            name: "a",
                                        },
                                        array_size: None,
                                    },
                                },
                                Node {
                                    sp: SpanPosition {
                                        start: 55,
                                        end: 60,
                                    },
                                    data: Declaration {
                                        type_specifier: Int,
                                        identifier: Identifier {
                                            name: "b",
                                        },
                                        array_size: None,
                                    },
                                },
                            ],
                        ),
                        body: Node {
                            sp: SpanPosition {
                                start: 62,
                                end: 131,
                            },
                            data: Block {
                                declarations: [
                                    Node {
                                        sp: SpanPosition {
                                            start: 68,
                                            end: 73,
                                        },
                                        data: Declaration {
                                            type_specifier: Int,
                                            identifier: Identifier {
                                                name: "c",
                                            },
                                            array_size: None,
                                        },
                                    },
                                ],
                                statements: [
                                    Node {
                                        sp: SpanPosition {
                                            start: 80,
                                            end: 87,
                                        },
                                        data: Assignment(
                                            AssignmentStatement {
                                                set_value: GetOrSetValue {
                                                    identifier: Identifier {
                                                        name: "a",
                                                    },
                                                    index: None,
                                                },
                                                expression: Literal(
                                                    Int(
                                                        10,
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    Node {
                                        sp: SpanPosition {
                                            start: 92,
                                            end: 99,
                                        },
                                        data: Assignment(
                                            AssignmentStatement {
                                                set_value: GetOrSetValue {
                                                    identifier: Identifier {
                                                        name: "b",
                                                    },
                                                    index: None,
                                                },
                                                expression: Literal(
                                                    Int(
                                                        20,
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    Node {
                                        sp: SpanPosition {
                                            start: 104,
                                            end: 114,
                                        },
                                        data: Assignment(
                                            AssignmentStatement {
                                                set_value: GetOrSetValue {
                                                    identifier: Identifier {
                                                        name: "c",
                                                    },
                                                    index: None,
                                                },
                                                expression: BinaryExpression(
                                                    BinaryExpression {
                                                        left: GetOrSetValue(
                                                            GetOrSetValue {
                                                                identifier: Identifier {
                                                                    name: "a",
                                                                },
                                                                index: None,
                                                            },
                                                        ),
                                                        operator: Plus,
                                                        right: GetOrSetValue(
                                                            GetOrSetValue {
                                                                identifier: Identifier {
                                                                    name: "b",
                                                                },
                                                                index: None,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    Node {
                                        sp: SpanPosition {
                                            start: 120,
                                            end: 129,
                                        },
                                        data: Jump(
                                            Return(
                                                GetOrSetValue(
                                                    GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "c",
                                                        },
                                                        index: None,
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                ],
                            },
                        },
                    },
                },
            ],
        ),
        main_function: Node {
            sp: SpanPosition {
                start: 137,
                end: 232,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 149,
                        end: 232,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 155,
                                    end: 160,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "a",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 162,
                                    end: 163,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "b",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 165,
                                    end: 166,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "c",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 173,
                                    end: 180,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "a",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                10,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 185,
                                    end: 192,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "b",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                20,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 197,
                                    end: 211,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "c",
                                            },
                                            index: None,
                                        },
                                        expression: FunctionCall(
                                            FunctionCall {
                                                name: Identifier {
                                                    name: "sum",
                                                },
                                                arguments: [
                                                    GetOrSetValue(
                                                        GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "a",
                                                            },
                                                            index: None,
                                                        },
                                                    ),
                                                    GetOrSetValue(
                                                        GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "b",
                                                            },
                                                            index: None,
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 221,
                                    end: 230,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_a.ctiny!
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 167,
    },
    data: TranslationUnit {
        functions: None,
        main_function: Node {
            sp: SpanPosition {
                start: 0,
                end: 167,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 12,
                        end: 167,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 18,
                                    end: 24,
                                },
                                data: Declaration {
                                    type_specifier: Bool,
                                    identifier: Identifier {
                                        name: "x",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 30,
                                    end: 37,
                                },
                                data: Declaration {
                                    type_specifier: Float,
                                    identifier: Identifier {
                                        name: "y",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 39,
                                    end: 40,
                                },
                                data: Declaration {
                                    type_specifier: Float,
                                    identifier: Identifier {
                                        name: "z",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 47,
                                    end: 53,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "z",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 58,
                                    end: 64,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "y",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 69,
                                    end: 78,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "x",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Bool(
                                                true,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 84,
                                    end: 151,
                                },
                                data: If(
                                    IfStatement {
                                        condition: GetOrSetValue(
                                            GetOrSetValue {
                                                identifier: Identifier {
                                                    name: "x",
                                                },
                                                index: None,
                                            },
                                        ),
                                        if_body: [
                                            Assignment(
                                                AssignmentStatement {
                                                    set_value: GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "y",
                                                        },
                                                        index: None,
                                                    },
                                                    expression: BinaryExpression(
                                                        BinaryExpression {
                                                            left: GetOrSetValue(
                                                                GetOrSetValue {
                                                                    identifier: Identifier {
                                                                        name: "y",
                                                                    },
                                                                    index: None,
                                                                },
                                                            ),
                                                            operator: Plus,
                                                            right: GetOrSetValue(
                                                                GetOrSetValue {
                                                                    identifier: Identifier {
                                                                        name: "z",
                                                                    },
                                                                    index: None,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        else_body: Some(
                                            [
                                                Assignment(
                                                    AssignmentStatement {
                                                        set_value: GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "y",
                                                            },
                                                            index: None,
                                                        },
                                                        expression: BinaryExpression(
                                                            BinaryExpression {
                                                                left: GetOrSetValue(
                                                                    GetOrSetValue {
                                                                        identifier: Identifier {
                                                                            name: "y",
                                                                        },
                                                                        index: None,
                                                                    },
                                                                ),
                                                                operator: Minus,
                                                                right: GetOrSetValue(
                                                                    GetOrSetValue {
                                                                        identifier: Identifier {
                                                                            name: "z",
                                                                        },
                                                                        index: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            ],
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 156,
                                    end: 165,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_d.ctiny
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_d.ctiny!
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 108,
    },
    data: TranslationUnit {
        functions: None,
        main_function: Node {
            sp: SpanPosition {
                start: 0,
                end: 108,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 11,
                        end: 108,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 17,
                                    end: 26,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "a",
                                    },
                                    array_size: Some(
                                        10,
                                    ),
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 28,
                                    end: 29,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "i",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 36,
                                    end: 43,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "i",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                10,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 49,
                                    end: 87,
                                },
                                data: While(
                                    WhileStatement {
                                        condition: BinaryExpression(
                                            BinaryExpression {
                                                left: GetOrSetValue(
                                                    GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "i",
                                                        },
                                                        index: None,
                                                    },
                                                ),
                                                operator: Greater,
                                                right: Literal(
                                                    Int(
                                                        0,
                                                    ),
                                                ),
                                            },
                                        ),
                                        body: [
                                            Assignment(
                                                AssignmentStatement {
                                                    set_value: GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "a",
                                                        },
                                                        index: Some(
                                                            GetOrSetValue(
                                                                GetOrSetValue {
                                                                    identifier: Identifier {
                                                                        name: "i",
                                                                    },
                                                                    index: None,
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                    expression: GetOrSetValue(
                                                        GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "i",
                                                            },
                                                            index: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 97,
                                    end: 106,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_b.ctiny
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_b.ctiny!
[2023-07-12T15:22:20 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 114,
    },
    data: TranslationUnit {
        functions: None,
        main_function: Node {
            sp: SpanPosition {
                start: 0,
                end: 114,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 12,
                        end: 114,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 18,
                                    end: 23,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "i",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 29,
                                    end: 35,
                                },
                                data: Declaration {
                                    type_specifier: Char,
                                    identifier: Identifier {
                                        name: "c",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 42,
                                    end: 49,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "i",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                20,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 55,
                                    end: 93,
                                },
                                data: While(
                                    WhileStatement {
                                        condition: BinaryExpression(
                                            BinaryExpression {
                                                left: GetOrSetValue(
                                                    GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "i",
                                                        },
                                                        index: None,
                                                    },
                                                ),
                                                operator: Greater,
                                                right: Literal(
                                                    Int(
                                                        0,
                                                    ),
                                                ),
                                            },
                                        ),
                                        body: [
                                            Assignment(
                                                AssignmentStatement {
                                                    set_value: GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "c",
                                                        },
                                                        index: None,
                                                    },
                                                    expression: Literal(
                                                        Char(
                                                            'a',
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 103,
                                    end: 112,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::params]  ðŸš€ starting program...
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_c.ctiny
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_c.ctiny!
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 232,
    },
    data: TranslationUnit {
        functions: Some(
            [
                Node {
                    sp: SpanPosition {
                        start: 40,
                        end: 131,
                    },
                    data: Function {
                        name: Identifier {
                            name: "sum",
                        },
                        return_type: Int,
                        params: Some(
                            [
                                Node {
                                    sp: SpanPosition {
                                        start: 48,
                                        end: 53,
                                    },
                                    data: Declaration {
                                        type_specifier: Int,
                                        identifier: Identifier {
                                            name: "a",
                                        },
                                        array_size: None,
                                    },
                                },
                                Node {
                                    sp: SpanPosition {
                                        start: 55,
                                        end: 60,
                                    },
                                    data: Declaration {
                                        type_specifier: Int,
                                        identifier: Identifier {
                                            name: "b",
                                        },
                                        array_size: None,
                                    },
                                },
                            ],
                        ),
                        body: Node {
                            sp: SpanPosition {
                                start: 62,
                                end: 131,
                            },
                            data: Block {
                                declarations: [
                                    Node {
                                        sp: SpanPosition {
                                            start: 68,
                                            end: 73,
                                        },
                                        data: Declaration {
                                            type_specifier: Int,
                                            identifier: Identifier {
                                                name: "c",
                                            },
                                            array_size: None,
                                        },
                                    },
                                ],
                                statements: [
                                    Node {
                                        sp: SpanPosition {
                                            start: 80,
                                            end: 87,
                                        },
                                        data: Assignment(
                                            AssignmentStatement {
                                                set_value: GetOrSetValue {
                                                    identifier: Identifier {
                                                        name: "a",
                                                    },
                                                    index: None,
                                                },
                                                expression: Literal(
                                                    Int(
                                                        10,
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    Node {
                                        sp: SpanPosition {
                                            start: 92,
                                            end: 99,
                                        },
                                        data: Assignment(
                                            AssignmentStatement {
                                                set_value: GetOrSetValue {
                                                    identifier: Identifier {
                                                        name: "b",
                                                    },
                                                    index: None,
                                                },
                                                expression: Literal(
                                                    Int(
                                                        20,
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    Node {
                                        sp: SpanPosition {
                                            start: 104,
                                            end: 114,
                                        },
                                        data: Assignment(
                                            AssignmentStatement {
                                                set_value: GetOrSetValue {
                                                    identifier: Identifier {
                                                        name: "c",
                                                    },
                                                    index: None,
                                                },
                                                expression: BinaryExpression(
                                                    BinaryExpression {
                                                        left: GetOrSetValue(
                                                            GetOrSetValue {
                                                                identifier: Identifier {
                                                                    name: "a",
                                                                },
                                                                index: None,
                                                            },
                                                        ),
                                                        operator: Plus,
                                                        right: GetOrSetValue(
                                                            GetOrSetValue {
                                                                identifier: Identifier {
                                                                    name: "b",
                                                                },
                                                                index: None,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    Node {
                                        sp: SpanPosition {
                                            start: 120,
                                            end: 129,
                                        },
                                        data: Jump(
                                            Return(
                                                GetOrSetValue(
                                                    GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "c",
                                                        },
                                                        index: None,
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                ],
                            },
                        },
                    },
                },
            ],
        ),
        main_function: Node {
            sp: SpanPosition {
                start: 137,
                end: 232,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 149,
                        end: 232,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 155,
                                    end: 160,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "a",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 162,
                                    end: 163,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "b",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 165,
                                    end: 166,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "c",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 173,
                                    end: 180,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "a",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                10,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 185,
                                    end: 192,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "b",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                20,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 197,
                                    end: 211,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "c",
                                            },
                                            index: None,
                                        },
                                        expression: FunctionCall(
                                            FunctionCall {
                                                name: Identifier {
                                                    name: "sum",
                                                },
                                                arguments: [
                                                    GetOrSetValue(
                                                        GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "a",
                                                            },
                                                            index: None,
                                                        },
                                                    ),
                                                    GetOrSetValue(
                                                        GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "b",
                                                            },
                                                            index: None,
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 221,
                                    end: 230,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_a.ctiny
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_a.ctiny!
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 167,
    },
    data: TranslationUnit {
        functions: None,
        main_function: Node {
            sp: SpanPosition {
                start: 0,
                end: 167,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 12,
                        end: 167,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 18,
                                    end: 24,
                                },
                                data: Declaration {
                                    type_specifier: Bool,
                                    identifier: Identifier {
                                        name: "x",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 30,
                                    end: 37,
                                },
                                data: Declaration {
                                    type_specifier: Float,
                                    identifier: Identifier {
                                        name: "y",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 39,
                                    end: 40,
                                },
                                data: Declaration {
                                    type_specifier: Float,
                                    identifier: Identifier {
                                        name: "z",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 47,
                                    end: 53,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "z",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 58,
                                    end: 64,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "y",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 69,
                                    end: 78,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "x",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Bool(
                                                true,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 84,
                                    end: 151,
                                },
                                data: If(
                                    IfStatement {
                                        condition: GetOrSetValue(
                                            GetOrSetValue {
                                                identifier: Identifier {
                                                    name: "x",
                                                },
                                                index: None,
                                            },
                                        ),
                                        if_body: [
                                            Assignment(
                                                AssignmentStatement {
                                                    set_value: GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "y",
                                                        },
                                                        index: None,
                                                    },
                                                    expression: BinaryExpression(
                                                        BinaryExpression {
                                                            left: GetOrSetValue(
                                                                GetOrSetValue {
                                                                    identifier: Identifier {
                                                                        name: "y",
                                                                    },
                                                                    index: None,
                                                                },
                                                            ),
                                                            operator: Plus,
                                                            right: GetOrSetValue(
                                                                GetOrSetValue {
                                                                    identifier: Identifier {
                                                                        name: "z",
                                                                    },
                                                                    index: None,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        else_body: Some(
                                            [
                                                Assignment(
                                                    AssignmentStatement {
                                                        set_value: GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "y",
                                                            },
                                                            index: None,
                                                        },
                                                        expression: BinaryExpression(
                                                            BinaryExpression {
                                                                left: GetOrSetValue(
                                                                    GetOrSetValue {
                                                                        identifier: Identifier {
                                                                            name: "y",
                                                                        },
                                                                        index: None,
                                                                    },
                                                                ),
                                                                operator: Minus,
                                                                right: GetOrSetValue(
                                                                    GetOrSetValue {
                                                                        identifier: Identifier {
                                                                            name: "z",
                                                                        },
                                                                        index: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            ],
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 156,
                                    end: 165,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_d.ctiny
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_d.ctiny!
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 108,
    },
    data: TranslationUnit {
        functions: None,
        main_function: Node {
            sp: SpanPosition {
                start: 0,
                end: 108,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 11,
                        end: 108,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 17,
                                    end: 26,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "a",
                                    },
                                    array_size: Some(
                                        10,
                                    ),
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 28,
                                    end: 29,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "i",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 36,
                                    end: 43,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "i",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                10,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 49,
                                    end: 87,
                                },
                                data: While(
                                    WhileStatement {
                                        condition: BinaryExpression(
                                            BinaryExpression {
                                                left: GetOrSetValue(
                                                    GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "i",
                                                        },
                                                        index: None,
                                                    },
                                                ),
                                                operator: Greater,
                                                right: Literal(
                                                    Int(
                                                        0,
                                                    ),
                                                ),
                                            },
                                        ),
                                        body: [
                                            Assignment(
                                                AssignmentStatement {
                                                    set_value: GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "a",
                                                        },
                                                        index: Some(
                                                            GetOrSetValue(
                                                                GetOrSetValue {
                                                                    identifier: Identifier {
                                                                        name: "i",
                                                                    },
                                                                    index: None,
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                    expression: GetOrSetValue(
                                                        GetOrSetValue {
                                                            identifier: Identifier {
                                                                name: "i",
                                                            },
                                                            index: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 97,
                                    end: 106,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Parsing file: /home/onyr/Documents/5passau/ctiny_programing_paradigm_project/res/valid/valid_program_b.ctiny
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] Syntax Parsing successful for file valid_program_b.ctiny!
[2023-07-12T15:24:30 UTC][INFO tiny_ebnf_grammar_parser::pipelines] AST: Node {
    sp: SpanPosition {
        start: 0,
        end: 114,
    },
    data: TranslationUnit {
        functions: None,
        main_function: Node {
            sp: SpanPosition {
                start: 0,
                end: 114,
            },
            data: Function {
                name: Identifier {
                    name: "main",
                },
                return_type: Int,
                params: None,
                body: Node {
                    sp: SpanPosition {
                        start: 12,
                        end: 114,
                    },
                    data: Block {
                        declarations: [
                            Node {
                                sp: SpanPosition {
                                    start: 18,
                                    end: 23,
                                },
                                data: Declaration {
                                    type_specifier: Int,
                                    identifier: Identifier {
                                        name: "i",
                                    },
                                    array_size: None,
                                },
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 29,
                                    end: 35,
                                },
                                data: Declaration {
                                    type_specifier: Char,
                                    identifier: Identifier {
                                        name: "c",
                                    },
                                    array_size: None,
                                },
                            },
                        ],
                        statements: [
                            Node {
                                sp: SpanPosition {
                                    start: 42,
                                    end: 49,
                                },
                                data: Assignment(
                                    AssignmentStatement {
                                        set_value: GetOrSetValue {
                                            identifier: Identifier {
                                                name: "i",
                                            },
                                            index: None,
                                        },
                                        expression: Literal(
                                            Int(
                                                20,
                                            ),
                                        ),
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 55,
                                    end: 93,
                                },
                                data: While(
                                    WhileStatement {
                                        condition: BinaryExpression(
                                            BinaryExpression {
                                                left: GetOrSetValue(
                                                    GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "i",
                                                        },
                                                        index: None,
                                                    },
                                                ),
                                                operator: Greater,
                                                right: Literal(
                                                    Int(
                                                        0,
                                                    ),
                                                ),
                                            },
                                        ),
                                        body: [
                                            Assignment(
                                                AssignmentStatement {
                                                    set_value: GetOrSetValue {
                                                        identifier: Identifier {
                                                            name: "c",
                                                        },
                                                        index: None,
                                                    },
                                                    expression: Literal(
                                                        Char(
                                                            'a',
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                            Node {
                                sp: SpanPosition {
                                    start: 103,
                                    end: 112,
                                },
                                data: Jump(
                                    Return(
                                        Literal(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ),
                            },
                        ],
                    },
                },
            },
        },
    },
}
